{"version":3,"sources":["CheckBox/CheckBox.js","CityCard/CityCard.js","App.js","serviceWorker.js","index.js"],"names":["CheckBox","props","className","cityName","type","onChange","changeHandler","cityId","CityCard","cityInfo","name","id","src","process","icon","alt","temp","App","checkCityHandler","city","selectedCitiesIds","includes","splice","indexOf","push","okButtonHandler","a","async","newCitiesWithTemp","fetch","cityWeatherData","json","pureCityWeatherData","Math","round","main","weather","setState","shownCitiesWithTemp","state","allCities","myCities","Object","keys","this","map","key","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ilBAceA,G,MAVE,SAACC,GACd,OACI,2BAAOC,UAAU,gBACZD,EAAME,SACP,2BAAOC,KAAK,WAAWC,SAAU,WAAQJ,EAAMK,cAAcL,EAAMM,WACnE,0BAAML,UAAU,iBCMbM,G,MAXE,SAACP,GACd,OACI,0BAAMC,UAAU,YACZ,2BAAID,EAAMQ,SAASC,MACnB,uBAAGC,GAAG,QAAO,yBAAKA,GAAG,QAAQC,IAAKC,mCAAsCZ,EAAMQ,SAASK,KAAO,OAAQC,IAAI,kBAC1G,2BAAId,EAAMQ,SAASO,KAAnB,c,OCyDGC,G,kBAzDb,WAAYhB,GAAQ,IAAD,8BACjB,4CAAMA,KAORiB,iBAAmB,SAACC,GAAD,OACjB,EAAKC,kBAAkBC,SAASF,GAAQ,EAAKC,kBAAkBE,OAAO,EAAKF,kBAAkBG,QAAQJ,GAAO,GAAK,EAAKC,kBAAkBI,KAAKL,IAT5H,EAYnBM,gBAAkB,0CAAAC,EAAAC,OAAA,gDAEVC,EAAoB,GAFV,8BAGG,EAAKR,kBAHR,yEAGPb,EAHO,oBAAAmB,EAAA,MAIcG,MAAMhB,0GAA0DN,IAJ9E,eAIVuB,EAJU,mBAAAJ,EAAA,MAKkBI,EAAgBC,QALlC,QAKVC,EALU,OAMdJ,EAAkBrB,GAAU,CACtB,KAAQyB,EAAoBtB,KAC5B,KAAQuB,KAAKC,MAAMF,EAAoBG,KAAKnB,MAC5C,KAAQgB,EAAoBI,QAAQ,GAAGtB,MAT/B,6QAYZ,EAAKuB,SAAS,CAACC,oBAAoBV,IAZvB,4EAVhB,EAAKW,MAAQ,CAAED,oBAAqB,IACpC,EAAKlB,kBAAoB,GACzB,EAAKoB,UAAYC,IAJA,E,sEA4BT,IAAD,OACP,OACE,yBAAKvC,UAAU,OACb,+CACA,mGACA,6BAEIwC,OAAOC,KAAKC,KAAKJ,WAAWK,KAAI,SAAC1C,GAC/B,OACE,kBAAC,EAAD,CAAU2C,IAAK,EAAKN,UAAUrC,GAAWA,SAAUA,EAAUI,OAAQ,EAAKiC,UAAUrC,GAClFG,cAAe,EAAKY,uBAK9B,4BAAQhB,UAAU,SAAS6C,QAASH,KAAKnB,iBAAzC,MACA,yBAAKvB,UAAU,eAEXwC,OAAOC,KAAKC,KAAKL,MAAMD,qBAAqBO,KAAI,SAACtC,GAAD,OAC9C,kBAAC,EAAD,CAAUuC,IAAKvC,EAAQE,SAAU,EAAK8B,MAAMD,oBAAoB/B,c,GAjD5DyC,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.aa00a615.chunk.js","sourcesContent":["import React from 'react';\nimport './CheckBox.css';\n\n\nconst CheckBox = (props) => {\n    return (\n        <label className=\"cityCheckBox\">\n            {props.cityName}\n            <input type=\"checkbox\" onChange={() => { props.changeHandler(props.cityId) }} />\n            <span className=\"checkmark\" />\n        </label>\n    );\n}\n\nexport default CheckBox;\n","import React from 'react';\nimport './CityCard.css';\n\n\nconst CityCard = (props) => {\n    return (\n        <span className=\"cityCard\">\n            <p>{props.cityInfo.name}</p>\n            <p id=\"icon\"><img id=\"wicon\" src={process.env.REACT_APP_WEATHER_ICONS + props.cityInfo.icon + \".png\"} alt=\"Weather icon\" /></p>\n            <p>{props.cityInfo.temp} â„ƒ</p>\n        </span>\n    );\n}\n\n\nexport default CityCard;\n\n","import React, { Component } from 'react';\nimport CheckBox from './CheckBox/CheckBox';\nimport CityCard from './CityCard/CityCard';\nimport {myCities} from './myCities.json';\nimport './App.css';\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { shownCitiesWithTemp: {} };\n    this.selectedCitiesIds = [];\n    this.allCities = myCities;\n  }\n\n\n  checkCityHandler = (city) =>\n    this.selectedCitiesIds.includes(city) ? this.selectedCitiesIds.splice(this.selectedCitiesIds.indexOf(city), 1) : this.selectedCitiesIds.push(city);\n\n\n  okButtonHandler = async () => {\n\n    const newCitiesWithTemp = {};\n    for (let cityId of this.selectedCitiesIds) {\n      let cityWeatherData = await fetch(process.env.REACT_APP_WEATHER_API + '&units=metric&id=' + cityId);\n      let pureCityWeatherData = await cityWeatherData.json();\n      newCitiesWithTemp[cityId] = {\n            \"name\": pureCityWeatherData.name,\n            \"temp\": Math.round(pureCityWeatherData.main.temp),\n            \"icon\": pureCityWeatherData.weather[0].icon\n          };\n        }\n        this.setState({shownCitiesWithTemp:newCitiesWithTemp});\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <h1>Current Weather</h1>\n        <h4>Please select the cities you want to check the current weather for:</h4>\n        <div>\n          {\n            Object.keys(this.allCities).map((cityName) => {\n              return (\n                <CheckBox key={this.allCities[cityName]} cityName={cityName} cityId={this.allCities[cityName]}\n                  changeHandler={this.checkCityHandler} />\n              );\n            })\n          }\n        </div>\n        <button className=\"button\" onClick={this.okButtonHandler}>OK</button>\n        <div className=\"citiesCards\">\n          {\n            Object.keys(this.state.shownCitiesWithTemp).map((cityId) =>\n              <CityCard key={cityId} cityInfo={this.state.shownCitiesWithTemp[cityId]} />\n            )\n          }\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}